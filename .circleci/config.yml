version: 2.1

_run:
  pull_sonar_image: &pull_sonar_image
    name: Pull Docker sonar-scanner image
    command: |
      echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
      docker pull pagarme/sonar-scanner
  pull_sonar_check_quality_gate_image: &pull_sonar_check_quality_gate_image
    name: Pull Docker check-sonar-quality-gate image
    command: |
      echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
      docker pull pagarme/check-sonar-quality-gate

parameters:
  machine_image:
    type: string
    default: ubuntu-2004:202010-01
  working_dir:
    type: string
    default: '~/magento2'

jobs:
  build:
    working_directory: /app
    docker:
      - image: php:7.1-apache
        environment:
          APP_ENV: test
    steps:
      - checkout
      - run:
          name: Install system packages
          command: apt-get update && apt-get -y install zip git zlib1g-dev wget
      - run:
          name: Install PHP extensions
          command: |
            docker-php-ext-install pdo
            docker-php-ext-install zip
      - run:
          name: Display PHP information
          command: |
            php -v
      - run:
          name: Check PHP sintax
          command: find . -name \*.php -exec php -l "{}" \;
      - persist_to_workspace:
          root: /
          paths:
            - app

  sonar:
    working_directory: << pipeline.parameters.working_dir >>
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - run: *pull_sonar_image
      - run:
          name: Run Sonar
          command: make sonar BRANCH=$CIRCLE_BRANCH
      - persist_to_workspace:
          root: << pipeline.parameters.working_dir >>
          paths:
            - '*'

  check_quality_gate_sonar:
    working_directory: << pipeline.parameters.working_dir >>
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - attach_workspace:
          at: << pipeline.parameters.working_dir >>
      - run: *pull_sonar_check_quality_gate_image
      - run:
          name: Check quality gate
          command: make sonar-check-quality-gate

  publish:
    working_directory: /
    docker:
      - image: docker:rc-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /
      - run:
          name: Copy CI files to root
          command: |
            cd /app
            cp .circleci/data/auth.json .
            cp .circleci/data/docker-compose.yml .
            cp .circleci/data/Dockerfile .
            cp .circleci/data/wait-for-mysql.sh .
            cp .circleci/data/magento2_module_install.sql .
      - run:
          name: Build image base for modifications
          command: |
            cd /app
            ls
            docker compose up -d
      - run:
          name: Activate and setup Plugin
          command: |
            docker ps
            docker exec -it magento2_bitnami sh -c "cd /opt/bitnami/magento && composer config minimum-stability dev"
            docker exec -it magento2_bitnami sh -c "cd /opt/bitnami/magento && composer require pagarme/pagarme-magento2-module:dev-test"
      - store_artifacts:
          path: /error
      - run:
          name: Clear useless files
          command: |
            pwd
      - deploy:
          name: Commit and push Docker image
          command: |
            sleep 5 && docker stop magento2_bitnami
            docker login ${DOCKER_ACCOUNT} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            docker commit magento2_bitnami ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
            docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest"
            docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_BRANCH}"
            docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_SHA1:0:8}"
            docker push "${DOCKER_ACCOUNT}/${PROJECT_NAME}"

  deploy_staging:
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - run:
          name: Test Swagger
          command: |
            response=$(curl -s -o /dev/null -I -w "%{http_code}" http://stg-magento2.mundipagg.com/rest/all/schema?services=all)
            if [ "$response" = '200' ]; then echo 'Swagger Ok'; else echo 'Swagger invalid'; exit 1; fi
      - run:
          name: Send deployment webhook to Rancher
          command: |
            BODY='{"push_data":{"tag":"'"${CIRCLE_BRANCH}"'"},"repository":{"repo_name":"'"${DOCKER_ACCOUNT}/${PROJECT_NAME}"'"}}'
            curl -X POST ${RANCHER_STG_DEPLOY_URL} -H 'Content-Type: application/json' -d "${BODY}"

  publish_php8:
    working_directory: /
    docker:
      - image: docker:rc-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /
      - run:
          name: Copy CI files to root
          command: |
            cd /app
            cp .circleci/data/auth.json .
            cp .circleci/data/docker-compose.yml .
            cp .circleci/data/Dockerfile .
            cp .circleci/data/wait-for-mysql.sh .
            cp .circleci/data/magento2_module_install.sql .
      - run:
          name: Build image base for modifications
          command: |
            cd /app
            ls
            docker compose up -d
      - run:
          name: Activate and setup Plugin
          command: |
            docker ps
            docker exec -it magento2_bitnami sh -c "cd /bitnami/magento && ls && php composer config minimum-stability dev"
            docker exec -it magento2_bitnami sh -c "cd /bitnami/magento && composer require pagarme/pagarme-magento2-module:~2"
      - store_artifacts:
          path: /error
      - run:
          name: Clear useless files
          command: |
            pwd
      - deploy:
          name: Commit and push Docker image
          command: |
            sleep 5 && docker stop magento2_bitnami
            docker login ${DOCKER_ACCOUNT} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            docker commit magento2_bitnami ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
            docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest"
            docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_BRANCH}"
            docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_SHA1:0:8}"
            docker push "${DOCKER_ACCOUNT}/${PROJECT_NAME}"

  deploy_staging_php8:
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - run:
          name: Test Swagger
          command: |
            response=$(curl -s -o /dev/null -I -w "%{http_code}" http://stg-magento2.mundipagg.com/rest/all/schema?services=all)
            if [ "$response" = '200' ]; then echo 'Swagger Ok'; else echo 'Swagger invalid'; exit 1; fi
      - run:
          name: Send deployment webhook to Rancher
          command: |
            BODY='{"push_data":{"tag":"'"${CIRCLE_BRANCH}"'"},"repository":{"repo_name":"'"${DOCKER_ACCOUNT}/${PROJECT_NAME}"'"}}'
            curl -X POST ${RANCHER_STG_DEPLOY_URL} -H 'Content-Type: application/json' -d "${BODY}"

workflows:
  version: 2
  build_publish_deploy:
    jobs:
      - build
      - sonar:
          context: dockerhub
          filters:
            branches:
              ignore:
                - master
                - develop
                - php8
                - test
      - check_quality_gate_sonar:
          context: dockerhub
          requires:
            - sonar
          filters:
            branches:
              ignore:
                - master
                - develop
                - php8
                - test
      - publish:
          context: acceptance
          requires:
            - build
            - sonar
          filters:
            branches:
              only:
                - develop
                - test
      - deploy_staging:
          context: acceptance
          requires:
            - publish
          filters:
            branches:
              only:
                - develop
                - test
      - publish_php8:
          context: acceptance
          requires:
            - build
            - sonar
          filters:
            branches:
              only: php8
      - deploy_staging_php8:
          context: acceptance
          requires:
            - publish_php8
          filters:
            branches:
              only: php8

